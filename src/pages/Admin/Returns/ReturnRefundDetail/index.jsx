import React, { useEffect, useState } from 'react';
import {
    Box, Typography, Paper, CircularProgress, Chip, Button, List, ListItem, ListItemText, Divider,
    Table, TableHead, TableRow, TableCell, TableBody,
    Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions,
    Radio, RadioGroup, FormControlLabel, FormControl, FormLabel
} from '@mui/material';
import { useParams, useNavigate } from 'react-router-dom';
import { returnRefundService } from '../../../../services/admin/returnRefundService';
import { formatCurrencyVND } from '../../../../utils/formatCurrency';

const statusColors = {
    pending: 'warning',
    approved: 'info',
    rejected: 'error',
    awaiting_pickup: 'warning',
    pickup_booked: 'info',
    received: 'success',
    refunded: 'default'
};
const labelMap = {
    pending: 'Ch·ªù duy·ªát',
    approved: 'ƒê√£ duy·ªát',
    rejected: 'T·ª´ ch·ªëi',
    awaiting_pickup: 'Ch·ªù g·ª≠i h√†ng',
    pickup_booked: 'GHN ƒë√£ l·∫•y',
    received: 'ƒê√£ nh·∫≠n h√†ng',
    refunded: 'ƒê√£ ho√†n ti·ªÅn'
};
const StatusChip = ({ status }) => (
    <Chip label={labelMap[status] || status} color={statusColors[status] || 'default'} size="small" />
);

const rejectReasonsOptions = [
    { id: 'INVALID_PROOF', label: 'B·∫±ng ch·ª©ng kh√¥ng r√µ r√†ng/kh√¥ng h·ª£p l·ªá' },
    { id: 'OUT_OF_POLICY', label: 'Y√™u c·∫ßu n·∫±m ngo√†i ch√≠nh s√°ch ƒë·ªïi tr·∫£' },
    { id: 'WRONG_ITEM_RETURNED', label: 'S·∫£n ph·∫©m g·ª≠i v·ªÅ kh√¥ng ƒë√∫ng v·ªõi y√™u c·∫ßu' },
    { id: 'DAMAGED_BY_CUSTOMER', label: 'S·∫£n ph·∫©m b·ªã l·ªói do ng∆∞·ªùi mua' },
    { id: 'OVER_TIME_LIMIT', label: 'ƒê√£ qu√° th·ªùi h·∫°n y√™u c·∫ßu ƒë·ªïi tr·∫£' },
    { id: 'OTHER', label: 'L√Ω do kh√°c (vui l√≤ng m√¥ t·∫£ chi ti·∫øt)' },
];

const ReturnRefundDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [detail, setDetail] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [openReceivedDialog, setOpenReceivedDialog] = useState(false);
    const [receivedNote, setReceivedNote] = useState('');

    const [openRefundedDialog, setOpenRefundedDialog] = useState(false);
    const [refundedNote, setRefundedNote] = useState('');

    const [openRejectDialog, setOpenRejectDialog] = useState(false);
    const [selectedRejectReasonOption, setSelectedRejectReasonOption] = useState('');
    const [customRejectReason, setCustomRejectReason] = useState('');
    const [rejectReasonError, setRejectReasonError] = useState(false);

    const fetchDetail = async () => {
        try {
            setLoading(true);
            const res = await returnRefundService.getReturnDetail(id);
            if (res.data && res.data.data) {
                setDetail(res.data.data);
            } else {
                setError('Kh√¥ng t√¨m th·∫•y chi ti·∫øt y√™u c·∫ßu tr·∫£ h√†ng.');
            }
        } catch (err) {
            console.error("L·ªói khi t·∫£i chi ti·∫øt y√™u c·∫ßu:", err);
            setError('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchDetail();
    }, [id]);

    // --- H√†m x·ª≠ l√Ω cho dialog "Received" (ƒê√£ nh·∫≠n h√†ng) ---
    const handleOpenReceivedDialog = () => {
        setReceivedNote('');
        setOpenReceivedDialog(true);
    };

    const handleCloseReceivedDialog = () => {
        setOpenReceivedDialog(false);
        setReceivedNote('');
    };

    const handleConfirmReceived = async () => {
  try {
    const res = await returnRefundService.updateReturnStatus(id, {
      status: 'received',
      responseNote: receivedNote.trim() || null
    });
    console.log("‚úÖ Update th√†nh c√¥ng:", res.data);
    handleCloseReceivedDialog();
    fetchDetail();
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err.response?.data || err.message);
    alert(err.response?.data?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
  }
};


    // --- H√†m x·ª≠ l√Ω cho dialog "Refunded" (ƒê√£ ho√†n ti·ªÅn) ---
    const handleOpenRefundedDialog = () => {
        setRefundedNote('');
        setOpenRefundedDialog(true);
    };

    const handleCloseRefundedDialog = () => {
        setOpenRefundedDialog(false);
        setRefundedNote('');
    };

    const handleConfirmRefunded = async () => {
        if (!refundedNote.trim()) {
            alert('Vui l√≤ng nh·∫≠p ghi ch√∫ ho√†n ti·ªÅn (m√£ giao d·ªãch, s·ªë ti·ªÅn...).');
            return;
        }
        console.log("üì§ G·ª≠i update status (Ho√†n ti·ªÅn xong):", id, 'refunded', "Ghi ch√∫:", refundedNote);
        await returnRefundService.updateReturnStatus(id, { status: 'refunded', responseNote: refundedNote.trim() });
        handleCloseRefundedDialog();
        fetchDetail();
    };

    // --- H√†m x·ª≠ l√Ω cho dialog "Rejected" (T·ª´ ch·ªëi) tr√™n trang chi ti·∫øt ---
    const handleOpenRejectDialog = () => {
        setSelectedRejectReasonOption('');
        setCustomRejectReason('');
        setRejectReasonError(false);
        setOpenRejectDialog(true);
    };

    const handleCloseRejectDialog = () => {
        setOpenRejectDialog(false);
        setSelectedRejectReasonOption('');
        setCustomRejectReason('');
        setRejectReasonError(false);
    };

    const handleConfirmReject = async () => {
        let finalRejectReason = '';

        if (selectedRejectReasonOption === 'OTHER') {
            finalRejectReason = customRejectReason.trim();
        } else if (selectedRejectReasonOption) {
            finalRejectReason = rejectReasonsOptions.find(opt => opt.id === selectedRejectReasonOption)?.label || '';
        }

        if (!finalRejectReason) {
            setRejectReasonError(true);
            return;
        }

        console.log("üì§ G·ª≠i update status (T·ª´ ch·ªëi):", id, 'rejected', "L√Ω do:", finalRejectReason);
        await returnRefundService.updateReturnStatus(id, { status: 'rejected', responseNote: finalRejectReason });

        handleCloseRejectDialog();
        fetchDetail();
    };

    // --- H√†m x·ª≠ l√Ω cho h√†nh ƒë·ªông "Approved" (Duy·ªát) kh√¥ng dialog ---
    const handleApproved = async () => {
        const confirmApprove = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën DUY·ªÜT y√™u c·∫ßu tr·∫£ h√†ng n√†y kh√¥ng? Kh√°ch h√†ng s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o ƒë·ªÉ g·ª≠i h√†ng v·ªÅ.");
        if (confirmApprove) {
            console.log("üì§ G·ª≠i update status (Duy·ªát):", id, 'approved');
            await returnRefundService.updateReturnStatus(id, { status: 'approved', responseNote: null });
            fetchDetail();
        }
    };

    if (loading) {
        return (
            <Box sx={{ p: 4, textAlign: 'center' }}>
                <CircularProgress /><Typography mt={2}>ƒêang t·∫£i chi ti·∫øt y√™u c·∫ßu‚Ä¶</Typography>
            </Box>
        );
    }

    if (error) {
        return (
            <Box sx={{ p: 4, textAlign: 'center', color: 'error.main' }}>
                <Typography variant="h6">{error}</Typography>
                <Button variant="contained" sx={{ mt: 2 }} onClick={() => navigate('/admin/return-requests')}>
                    Quay l·∫°i danh s√°ch
                </Button>
            </Box>
        );
    }

    if (!detail) {
        return (
            <Box sx={{ p: 4, textAlign: 'center' }}>
                <Typography variant="h6">Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt.</Typography>
                <Button variant="contained" sx={{ mt: 2 }} onClick={() => navigate('/admin/return-requests')}>
                    Quay l·∫°i danh s√°ch
                </Button>
            </Box>
        );
    }

    let selectedItemsParsed = [];
    try {
        if (detail.selectedItems) {
            selectedItemsParsed = JSON.parse(detail.selectedItems);
        }
    } catch (e) {
        console.error("L·ªói khi parse selectedItems:", e);
    }

    return (
  <Box sx={{ mt: 4, px: { xs: 2, sm: 3, md: 4 } }}>
    <Paper sx={{ p: { xs: 2, sm: 3, md: 4 } }}>
      <Typography variant="h5" gutterBottom component="h1" fontWeight="bold" mb={3}>
        Chi ti·∫øt y√™u c·∫ßu tr·∫£ h√†ng / ho√†n ti·ªÅn #{detail.returnCode}
      </Typography>

      <Button variant="outlined" sx={{ mb: 3 }} onClick={() => navigate('/admin/return-requests')}>
        &larr; Quay l·∫°i danh s√°ch
      </Button>

      <Box sx={{ mt: 2, mb: 4, display: 'flex', gap: 2, flexWrap: 'wrap', justifyContent: { xs: 'center', sm: 'flex-start' } }}>
        {detail.status === 'pending' && (
          <>
            <Button variant="contained" color="success" onClick={handleApproved}>Duy·ªát y√™u c·∫ßu</Button>
            <Button variant="outlined" color="error" onClick={handleOpenRejectDialog}>T·ª´ ch·ªëi y√™u c·∫ßu</Button>
          </>
        )}
        {['awaiting_pickup', 'pickup_booked'].includes(detail.status) && (
  <Button variant="contained" color="primary" onClick={handleOpenReceivedDialog}>ƒê√£ nh·∫≠n h√†ng</Button>
)}
<Dialog open={openReceivedDialog} onClose={handleCloseReceivedDialog}>
  <DialogTitle>X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng ho√†n tr·∫£</DialogTitle>
  <DialogContent>
    <DialogContentText>
      B·∫°n c√≥ ch·∫Øc ch·∫Øn ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng ho√†n tr·∫£ t·ª´ kh√°ch kh√¥ng? Nh·∫≠p ghi ch√∫ n·∫øu c·∫ßn.
    </DialogContentText>
    <TextField
      fullWidth
      multiline
      rows={3}
      value={receivedNote}
      onChange={(e) => setReceivedNote(e.target.value)}
      margin="dense"
      placeholder="Ghi ch√∫ (tu·ª≥ ch·ªçn)"
    />
  </DialogContent>
  <DialogActions>
    <Button onClick={handleCloseReceivedDialog}>Hu·ª∑</Button>
    <Button onClick={handleConfirmReceived} variant="contained" color="primary">
      X√°c nh·∫≠n
    </Button>
  </DialogActions>
</Dialog>

        {detail.status === 'received' && (
          <Button variant="contained" color="secondary" onClick={handleOpenRefundedDialog}>Ho√†n ti·ªÅn xong</Button>
        )}
      </Box>
<Dialog open={openRefundedDialog} onClose={handleCloseRefundedDialog}>
  <DialogTitle>X√°c nh·∫≠n ho√†n ti·ªÅn</DialogTitle>
  <DialogContent>
    <DialogContentText>
      B·∫°n x√°c nh·∫≠n ƒë√£ ho√†n ti·ªÅn cho kh√°ch? Vui l√≤ng nh·∫≠p m√£ giao d·ªãch ho·∫∑c ghi ch√∫.
    </DialogContentText>
    <TextField
      fullWidth
      multiline
      rows={3}
      value={refundedNote}
      onChange={(e) => setRefundedNote(e.target.value)}
      margin="dense"
      placeholder="Ghi ch√∫ ho√†n ti·ªÅn (m√£ giao d·ªãch, s·ªë ti·ªÅn...)"
    />
  </DialogContent>
  <DialogActions>
    <Button onClick={handleCloseRefundedDialog}>Hu·ª∑</Button>
    <Button onClick={handleConfirmRefunded} variant="contained" color="secondary">
      X√°c nh·∫≠n ho√†n ti·ªÅn
    </Button>
  </DialogActions>
</Dialog>

      <Typography variant="h6" gutterBottom sx={{ mt: 2 }}>Th√¥ng tin chung</Typography>
      <Divider sx={{ mb: 2 }} />
      <List dense>
        <ListItem><ListItemText primary="M√£ y√™u c·∫ßu:" secondary={detail.returnCode} /></ListItem>
        <ListItem><ListItemText primary="M√£ ƒë∆°n h√†ng:" secondary={detail.order?.orderCode || 'N/A'} /></ListItem>
        <ListItem><ListItemText primary="Tr·∫°ng th√°i:" secondary={<StatusChip status={detail.status} />} /></ListItem>
        <ListItem><ListItemText primary="Ng√†y g·ª≠i y√™u c·∫ßu:" secondary={new Date(detail.createdAt).toLocaleString('vi-VN')} /></ListItem>
        <ListItem><ListItemText primary="Ng√†y c·∫≠p nh·∫≠t cu·ªëi:" secondary={new Date(detail.updatedAt).toLocaleString('vi-VN')} /></ListItem>
        <ListItem><ListItemText primary="Ph·∫£n h·ªìi t·ª´ qu·∫£n tr·ªã vi√™n:" secondary={detail.responseNote || 'Ch∆∞a c√≥'} /></ListItem>
      </List>

      <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>L√Ω do v√† M√¥ t·∫£</Typography>
      <Divider sx={{ mb: 2 }} />
      <List dense>
        <ListItem><ListItemText primary="L√Ω do ch√≠nh:" secondary={detail.reason || 'N/A'} /></ListItem>
        <ListItem><ListItemText primary="M√¥ t·∫£ chi ti·∫øt (t·ª´ kh√°ch h√†ng):" secondary={detail.detailedReason || 'Kh√¥ng c√≥'} /></ListItem>
      </List>

      <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>S·∫£n ph·∫©m y√™u c·∫ßu tr·∫£</Typography>
      <Divider sx={{ mb: 2 }} />
      {detail.order?.items?.length > 0 && detail.items?.length > 0 ? (
        <Table size="small">
          <TableHead>
            <TableRow>
              <TableCell>SKU ID</TableCell>
              <TableCell>T√™n SP</TableCell>
              <TableCell>Gi√° mua</TableCell>
              <TableCell>S·ªë l∆∞·ª£ng ƒë√£ mua</TableCell>
              <TableCell>S·ªë l∆∞·ª£ng y√™u c·∫ßu tr·∫£</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {detail.items.map((returnItem, index) => {
              const matchedOrderItem = detail.order.items.find(o => o.skuId === returnItem.skuId);
              return (
                <TableRow key={index}>
                  <TableCell>{returnItem.skuId}</TableCell>
                  <TableCell>{returnItem.sku?.product?.name || '---'}</TableCell>
                  <TableCell>{formatCurrencyVND(matchedOrderItem?.price || 0)}</TableCell>
                  <TableCell>{matchedOrderItem?.quantity || '-'}</TableCell>
                  <TableCell>{returnItem.quantity}</TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      ) : (
        <Typography variant="body2" color="text.secondary">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ tr·∫£.</Typography>
      )}

      <Typography variant="h6" gutterBottom sx={{ mt: 3 }}>Th√¥ng tin ho√†n ti·ªÅn</Typography>
      <Divider sx={{ mb: 2 }} />
      <List dense>
        <ListItem><ListItemText primary="S·ªë ti·ªÅn d·ª± ki·∫øn ho√†n l·∫°i:" secondary={formatCurrencyVND(detail.refundAmount || 0)} /></ListItem>
        {detail.bankName && detail.accountNumber && detail.accountHolderName ? (
          <>
            <ListItem><ListItemText primary="Ng√¢n h√†ng:" secondary={detail.bankName} /></ListItem>
            <ListItem><ListItemText primary="S·ªë t√†i kho·∫£n:" secondary={detail.accountNumber} /></ListItem>
            <ListItem><ListItemText primary="T√™n ch·ªß t√†i kho·∫£n:" secondary={detail.accountHolderName} /></ListItem>
          </>
        ) : (
          <ListItem>
            <ListItemText
              primary="Ph∆∞∆°ng th·ª©c:"
              secondary={
                detail.order?.paymentMethod?.code?.toUpperCase() || 'Kh√¥ng x√°c ƒë·ªãnh'
              }
            />
          </ListItem>
        )}
        <ListItem><ListItemText primary="Email nh·∫≠n th√¥ng b√°o:" secondary={detail.user?.email || 'N/A'} /></ListItem>
      </List>
    </Paper>
  </Box>
);

};

export default ReturnRefundDetail;