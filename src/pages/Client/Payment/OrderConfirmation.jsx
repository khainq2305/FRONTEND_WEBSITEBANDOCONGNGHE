import React, { useEffect, useState } from 'react';
import { useParams, Link, useLocation, useNavigate, useSearchParams } from 'react-router-dom';
import CopyableRow from './CopyableRow';

import ProductList from './OrderConfirmation/ProductList';
import CustomerInfo from './OrderConfirmation/CustomerInfo';
import DeliveryMethod from './OrderConfirmation/DeliveryMethod';
import PaymentMethod from './OrderConfirmation/PaymentMethod';
import { paymentService } from '../../../services/client/paymentService';

import { orderService } from '../../../services/client/orderService';
import { toast } from 'react-toastify';
import Loader from '../../../components/common/Loader';
import { formatCurrencyVND } from '../../../utils/formatCurrency';

import bgPc from '../../../assets/Client/images/bg-pc.png';
import successIcon from '../../../assets/Client/images/Logo/snapedit_1749613755235 1.png';
import waitingIcon from '../../../assets/Client/images/Logo/snapedit_1749613755235 1.png'; // Add a suitable icon for waiting status

/* ---------- helper row ---------- */
const Row = ({ label, value, bold, color }) => (
  <div className={`flex justify-between ${color ?? 'text-gray-800'}`}>
    <span>{label}</span>
    <span className={bold ? 'font-semibold' : ''}>{value}</span>
  </div>
);

const OrderConfirmation = () => {
  /* ------------------- state ------------------- */
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const location = useLocation();

  const vnpTxnRef = searchParams.get('vnp_TxnRef');
  const resultCode = searchParams.get('resultCode'); // 0 = success, other = error/cancel (from MoMo)
  const momoOrderId = searchParams.get('orderId'); // MoMo's order ID

  const orderCodeFromUrl = searchParams.get('orderCode') || momoOrderId || vnpTxnRef;
  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isPaymentAttempted, setIsPaymentAttempted] = useState(false); // To prevent multiple callbacks

  // üëâ TH√äM STATE M·ªöI ƒê·ªÇ L∆ØU URL C·ª¶A QR CODE
  const [vietQrImageUrl, setVietQrImageUrl] = useState(null);
  const [vietQrInfo, setVietQrInfo] = useState(null);

  /* ------------------- side-effect: Handle MoMo callback ------------------- */
  useEffect(() => {
    // Only send callback if MoMo params are present and not already attempted
    if (momoOrderId && resultCode !== null && !isPaymentAttempted) {
      setIsPaymentAttempted(true); // Mark as attempted
      fetch('http://localhost:5000/payment/momo-callback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId: momoOrderId, resultCode })
      })
        .then((res) => {
          if (!res.ok) {
            console.error('MoMo callback failed with status:', res.status);
            throw new Error('MoMo callback failed');
          }
          return res.text();
        })
        .then((txt) => {
          console.log('Momo callback ->', txt);
          // Re-fetch order after callback to get updated status
          fetchOrderDetails(orderCodeFromUrl);
        })
        .catch((err) => {
          console.error('Callback l·ªói:', err);
          toast.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n MoMo.');
          // Even on error, try to fetch order details to reflect the current state
          fetchOrderDetails(orderCodeFromUrl);
        });
    }
  }, [momoOrderId, resultCode, isPaymentAttempted, orderCodeFromUrl]); // Depend on orderCodeFromUrl for re-fetch

  /* ------------------- side-effect: handle VNPay callback ------------------- */
  useEffect(() => {
    // G·ª≠i callback ƒë√∫ng 1 l·∫ßn
    if (!vnpTxnRef || isPaymentAttempted) return;

    setIsPaymentAttempted(true);

    const rawQuery = window.location.search.slice(1); // b·ªè d·∫•u '?'

    fetch('http://localhost:5000/payment/vnpay-callback', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ rawQuery })
    })
      .then((res) => res.text().then((txt) => ({ ok: res.ok, txt })))
      .then(({ ok, txt }) => {
        console.log('VNPay callback ‚Üí', txt);
        if (!ok || txt.trim().toUpperCase() !== 'OK') {
          throw new Error(txt);
        }
        fetchOrderDetails(orderCodeFromUrl);
      })
      .catch((err) => {
        console.error('VNPay callback error:', err);
        toast.error('C√≥ l·ªói khi x·ª≠ l√Ω thanh to√°n VNPay.');
        fetchOrderDetails(orderCodeFromUrl);
      });
  }, [vnpTxnRef, isPaymentAttempted, orderCodeFromUrl]);

  /* ------------------- side-effect: fetch order details ------------------- */
  const fetchOrderDetails = async (code) => {
    setLoading(true);
    try {
      const res = await orderService.getOrderById(code);
      if (res.data?.data) {
        const orderData = res.data.data;
        setOrder(orderData);

        const paymentCode = orderData?.paymentMethod?.code?.toLowerCase();

        // Ki·ªÉm tra n·∫øu l√† ph∆∞∆°ng th·ª©c 'atm' v√† ƒëang ch·ªù thanh to√°n
        const isPaymentPending = orderData.paymentStatus === 'waiting' || orderData.paymentStatus === 'unpaid';
        if (paymentCode === 'atm' && isPaymentPending) {
          try {
            const qrRes = await paymentService.generateVietQR({
              accountNumber: '2222555552005', // C√ì TH·ªÇ THAY B·∫∞NG CONFIG T·ª™ ENV
              accountName: 'NGUYEN QUOC KHAI',
              bankCode: 'MB',
              amount: orderData.finalPrice,
              message: `Thanh toan ${orderData.orderCode}`,
            });

            console.log("üì¶ Response generateVietQR:", qrRes);

            if (qrRes?.data?.qrImage) {
              setVietQrImageUrl(qrRes.data.qrImage);
              setVietQrInfo({
                accountNumber: qrRes.data.accountNumber,
                accountName: qrRes.data.accountName,
                bankCode: qrRes.data.bankCode,
                message: qrRes.data.message,
              });

              // C·∫≠p nh·∫≠t l·∫°i URL ƒë·ªÉ gi·ªØ QR
              const encoded = encodeURIComponent(qrRes.data.qrImage);
              const currentUrl = new URL(window.location.href);
              currentUrl.searchParams.set('qr', encoded);
              window.history.replaceState({}, '', currentUrl);
            } else {
              console.warn("‚ùå Backend kh√¥ng tr·∫£ v·ªÅ qrImage.");
              setVietQrImageUrl(null);
              setVietQrInfo(null);
            }
          } catch (qrError) {
            console.error('‚ùå L·ªói khi sinh QR VietQR:', qrError);
            toast.error('Kh√¥ng th·ªÉ t·∫°o m√£ QR thanh to√°n.');
            setVietQrImageUrl(null);
            setVietQrInfo(null);
          }
        } else {
          console.log("‚ö†Ô∏è Kh√¥ng ph·∫£i ph∆∞∆°ng th·ª©c thanh to√°n ATM ho·∫∑c kh√¥ng ch·ªù thanh to√°n.");
          setVietQrImageUrl(null);
          setVietQrInfo(null);
        }
      } else {
        toast.error('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho ƒë∆°n h√†ng n√†y.');
        setVietQrImageUrl(null);
        setVietQrInfo(null);
      }
    } catch (err) {
      console.error('‚ùå L·ªói l·∫•y ƒë∆°n h√†ng:', err);
      toast.error(err.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng.');
      setVietQrImageUrl(null);
      setVietQrInfo(null);
    } finally {
      setLoading(false);
    }
  };


  useEffect(() => {
    if (orderCodeFromUrl) {
      fetchOrderDetails(orderCodeFromUrl);
    } else {
      toast.error('Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng tr√™n URL.');
      setLoading(false);
    }
  }, [orderCodeFromUrl]); // Lo·∫°i b·ªè location.search kh·ªèi dependency ch√≠nh ƒë·ªÉ tr√°nh ch·∫°y l·∫°i fetchOrderDetails kh√¥ng c·∫ßn thi·∫øt

  useEffect(() => {
    // ƒê√¢y l√† useEffect ri√™ng ƒë·ªÉ ch·ªâ l·∫Øng nghe thay ƒë·ªïi c·ªßa URL query param 'qr'
    // v√† c·∫≠p nh·∫≠t state vietQrImageUrl n·∫øu c√≥
    const qr = new URLSearchParams(location.search).get('qr');
    if (qr) {
      setVietQrImageUrl(decodeURIComponent(qr));
    }
  }, [location.search]); // Ch·∫°y khi location.search thay ƒë·ªïi

  /* ------------------- handle pay again ------------------- */
  const handlePayAgain = async () => {
    if (!order) return;
    setLoading(true);
    try {
      const res = await orderService.payAgain(order.id, {
        bankCode: '', // ‚úÖ th√™m d√≤ng n√†y
      });
      if (res.data?.payUrl) {
        window.location.href = res.data.payUrl; // Redirect to new payment link
      } else {
        toast.error('Kh√¥ng th·ªÉ t·∫°o link thanh to√°n l·∫°i.');
      }
    } catch (err) {
      console.error('L·ªói thanh to√°n l·∫°i:', err);
      toast.error(err.response?.data?.message || 'L·ªói khi y√™u c·∫ßu thanh to√°n l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  /* ------------------- loading / error ------------------- */
  if (loading)
    return (
      <div className="flex justify-center items-center h-[60vh] bg-gray-50">
        <Loader fullscreen={false} />
      </div>
    );

  if (!order)
    return (
      <div className="flex justify-center items-center h-[60vh] bg-gray-50">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-red-500">T·∫£i th√¥ng tin ƒë∆°n h√†ng th·∫•t b·∫°i</h2>
          <p className="text-gray-600 mt-2">Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ƒë∆°n h√†ng ho·∫∑c th·ª≠ l·∫°i sau.</p>
          <Link to="/" className="mt-4 inline-block bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700">
            V·ªÅ trang ch·ªß
          </Link>
        </div>
      </div>
    );

  /* ------------------- destructuring data ------------------- */
  const {
    products = [],
    userAddress,
    paymentMethod,
    totalPrice,
    productDiscount = 0,
    couponDiscount = 0,
    shippingFee = 0,
    shippingDiscount: rawShipDiscount = 0,
    finalPrice,
    orderCode: code,
    paymentStatus,
    status: orderStatus,
    rewardPoints = 0 // üëà TH√äM D√íNG N√ÄY
  } = order;

  const shippingDiscount = Math.min(rawShipDiscount, shippingFee);

  const customer = {
    name: userAddress?.fullName || 'Ch∆∞a c√≥ t√™n',
    phone: userAddress?.phone || 'N/A'
  };

  const deliveryInfo = {
    address: userAddress?.fullAddress || 'N/A',
    time: order?.deliveryTime || 'Th·ªùi gian s·∫Ω ƒë∆∞·ª£c nh√¢n vi√™n x√°c nh·∫≠n khi g·ªçi ƒëi·ªán'
  };

  // S·ª≠a ƒë·ªãnh nghƒ©a isCOD ƒë·ªÉ d√πng paymentMethod?.code t·ª´ backend
  const isCOD = paymentMethod?.code?.toLowerCase() === 'cod' || paymentStatus === 'unpaid';

  const isOrderProcessing = orderStatus === 'processing';
  // üëâ S·ª≠a isPaymentPending ƒë·ªÉ bao g·ªìm c·∫£ 'unpaid'
  const isPaymentPending = paymentStatus === 'waiting' || paymentStatus === 'unpaid';
  const isPaymentSuccessful = paymentStatus === 'paid' || isCOD;

  /* ------------------- render ------------------- */
  return (
    <div className="bg-gray-100 py-8">
      <div className="max-w-[1200px] mx-auto">
        {/* ---------- header ---------- */}
        <div className="bg-no-repeat bg-center bg-contain" style={{ backgroundImage: `url(${bgPc})` }}>
          <div className="px-4 pt-12 pb-8">
            <div className="text-center">
              {orderStatus === 'cancelled' ? (
                <>
                  <img src={waitingIcon} alt="ƒê∆°n ƒë√£ hu·ª∑" className="w-30 h-45 mx-auto mb-4" />
                  <h1 className="text-red-600 text-3xl font-bold">ƒê∆°n h√†ng ƒë√£ b·ªã hu·ª∑</h1>
                  <p className="text-sm text-gray-600 mt-2 max-w-md mx-auto">
                    ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ b·ªã hu·ª∑. Vui l√≤ng ƒë·∫∑t l·∫°i n·∫øu b·∫°n v·∫´n mu·ªën ti·∫øp t·ª•c mua h√†ng.
                  </p>
                </>
              ) : isPaymentSuccessful ? (
                <>
                  <img src={successIcon} alt="ƒê·∫∑t h√†ng th√†nh c√¥ng" className="w-30 h-45 mx-auto mb-4" />
                  <h1 className="text-green-600 text-3xl font-bold">ƒê·∫∑t h√†ng th√†nh c√¥ng!</h1>
                  <p className="text-sm text-gray-600 mt-2 max-w-md mx-auto">
                    C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. Nh√¢n vi√™n s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng.
                  </p>
                </>
              ) : (
                <>
                  <img src={waitingIcon} alt="ƒê∆°n h√†ng ch·ªù thanh to√°n" className="w-30 h-45 mx-auto mb-4" />
                  <h1 className="text-orange-500 text-3xl font-bold">
                    {paymentMethod?.code === 'atm' ? 'Ch·ªù x√°c nh·∫≠n chuy·ªÉn kho·∫£n' : 'ƒê∆°n h√†ng ch·ªù thanh to√°n'}
                  </h1>
                  <p className="text-sm text-gray-600 mt-2 max-w-md mx-auto">
                    {paymentMethod?.code === 'atm'
                      ? 'Vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng n·ªôi dung v√† ch·ªù h·ªá th·ªëng x√°c nh·∫≠n giao d·ªãch.'
                      : 'ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ho√†n t·∫•t thanh to√°n ƒë·ªÉ ƒë∆°n h√†ng ƒë∆∞·ª£c x·ª≠ l√Ω.'}
                  </p>
                </>
              )}


            </div>
          </div>
        </div>


        <div className="pb-4">
          <div className="grid md:grid-cols-3 gap-4">

            <div className="md:col-span-2 space-y-4">
              <ProductList products={products} />
              <CustomerInfo {...customer} />
              <DeliveryMethod address={deliveryInfo.address} time={deliveryInfo.time} />

              <PaymentMethod
                method={paymentMethod?.name || 'Thanh to√°n khi nh·∫≠n h√†ng (COD)'}
                status={paymentStatus}
              />
            </div>


            <div className="bg-white p-4 rounded-xl shadow h-fit">
              <h2 className="text-base font-semibold mb-4 text-gray-800">Th√¥ng tin ƒë∆°n h√†ng</h2>

              <div className="text-sm space-y-2">

                <CopyableRow label="M√£ ƒë∆°n h√†ng" value={code} />

                <Row label="T·ªïng ti·ªÅn h√†ng" value={formatCurrencyVND(totalPrice)} bold />



                <Row
                  label="Ph√≠ v·∫≠n chuy·ªÉn"
                  value={shippingFee === 0 ? 'Mi·ªÖn ph√≠' : formatCurrencyVND(shippingFee)}
                />




                <div className="pt-2">
                  <div className="border-t border-dashed border-gray-300 mb-2" />
                  <Row label="C·∫ßn thanh to√°n" value={formatCurrencyVND(finalPrice)} bold color="text-red-600" />

                  <div className="flex justify-between text-amber-600 text-[13px] mt-2 items-center">
                    <span>ƒêi·ªÉm t√≠ch l≈©y</span>
                    <span className="flex items-center gap-1 font-semibold">
                      <span className="w-4 h-4 bg-yellow-200 text-yellow-600 text-[10px] font-bold flex items-center justify-center rounded-full">
                        ‚Çµ
                      </span>
                      +{rewardPoints} ƒëi·ªÉm
                    </span>
                  </div>


                </div>
              </div>


              <div className="mt-6 space-y-3">
                {isPaymentPending &&
                  isOrderProcessing &&
                  paymentMethod?.code?.toLowerCase() !== 'atm' &&
                  paymentMethod?.code?.toLowerCase() !== 'cod' && (
                    <button
                      onClick={handlePayAgain}
                      className="bg-primary text-white w-full py-2.5 rounded-md font-semibold inline-block text-center hover:opacity-85 transition-colors"
                    >
                      Thanh to√°n l·∫°i
                    </button>
                  )}

                <Link
                  to="/"
                  className={`text-white w-full py-2.5 rounded-md font-semibold inline-block text-center hover:opacity-85 transition-colors ${isPaymentPending && isOrderProcessing ? 'bg-gray-500' : 'bg-primary'
                    }`}
                >
                  V·ªÅ trang ch·ªß
                </Link>
                <Link to="/user-profile#quan-ly-don-hang" className="block text-sm text-green-600 hover:underline text-center">
                  Xem l·ªãch s·ª≠ ƒë∆°n mua
                </Link>
              </div>
            </div>

          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderConfirmation;