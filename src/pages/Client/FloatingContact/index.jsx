import React, { useState, useRef, useEffect } from 'react';
import './FloatingContact.css';
import resetIcon from '@/assets/Client/images/Logo/reset-reload.svg';
import { chatService } from '@/services/client/chatService';
import logo from '@/assets/Client/images/Logo/logo.svg';
import assistantDMXIcon from '@/assets/Client/images/Logo/assistant-dmx.png';

import ProductGridDisplay from './ProductGridDisplay/ProductGridDisplay';
import ProductTableDisplay from './ProductGridDisplay/ProductTableDisplay';

const quickSuggestions = [
  'T√¥i mu·ªën t√¨m qu·∫°t ƒëi·ªÅu ho√† cho ph√≤ng 30m¬≤',
  'C√≥ s·∫£n ph·∫©m n√†o ƒëang gi·∫£m gi√° kh√¥ng?',
  'T·ªß l·∫°nh n√†o ph√π h·ª£p gia ƒë√¨nh 4 ng∆∞·ªùi?',
  'Th∆∞∆°ng hi·ªáu Sunhouse c√≥ g√¨ n·ªïi b·∫≠t?',
  'T√¥i c√≥ th·ªÉ mua online kh√¥ng?',
  'Cho t√¥i bi·∫øt c√°ch li√™n h·ªá c·ª≠a h√†ng',
  'Web c·ªßa b·∫°n c√≥ uy t√≠n kh√¥ng?',
  'T√¥i mu·ªën ƒë∆∞·ª£c t∆∞ v·∫•n v·ªÅ m√°y l·ªçc n∆∞·ªõc'
];

export default function FloatingContactBox() {
  const [open, setOpen] = useState(false);
  const [tooltipVisible, setTooltipVisible] = useState(true);
  const [chatHistory, setChatHistory] = useState([]);
  const [message, setMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const chatEndRef = useRef(null);
  const inputRef = useRef(null);

  const initialTooltipMessage = 'Em r·∫•t s·∫µn l√≤ng h·ªó tr·ª£ Anh/Ch·ªã üòä';
  const secondaryTooltipMessage = 'Xin ch√†o Anh/Ch·ªã! Em l√† tr·ª£ l√Ω ·∫£o c·ªßa HomePower.';
  const [displayTooltipMessage, setDisplayTooltipMessage] = useState(initialTooltipMessage);
  const [messageKey, setMessageKey] = useState(0);

  const systemGreeting = {
    role: 'system',
    type: 'text',
    content: 'üëã Xin ch√†o Anh/Ch·ªã! Em l√† tr·ª£ l√Ω ·∫£o c·ªßa Home Power.'
  };

  useEffect(() => {
    const changeTooltipContentTimer = setTimeout(() => {
      setDisplayTooltipMessage(secondaryTooltipMessage);
      setMessageKey((prevKey) => prevKey + 1);
    }, 2000);

    const savedChat = localStorage.getItem('hp_chat_history');
    if (savedChat) {
      setChatHistory(JSON.parse(savedChat));
    }

    return () => {
      clearTimeout(changeTooltipContentTimer);
    };
  }, []);

  useEffect(() => {
    localStorage.setItem('hp_chat_history', JSON.stringify(chatHistory));
  }, [chatHistory]);

  useEffect(() => {
    if (open && chatHistory.length === 0) {
      setChatHistory([systemGreeting]);
    }
    if (open) {
      inputRef.current?.focus();
    }
  }, [open, chatHistory.length]);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatHistory, isLoading]);

  const handleOpenChat = () => {
    setOpen(true);
    setTooltipVisible(false);
  };

  const handleCloseChat = () => {
    setOpen(false);
    setDisplayTooltipMessage(initialTooltipMessage);
    setMessageKey((prevKey) => prevKey + 1);
    setTooltipVisible(true);
  };

  const resetChat = () => {
    setChatHistory([systemGreeting]);
    setMessage('');
    setShowSuggestions(true);
    inputRef.current?.focus();
  };

  const sendMessage = async (msg = message) => {
    const trimmed = msg.trim();
    if (!trimmed) return;

    const isFromSuggestion = quickSuggestions.includes(msg);
    if (showSuggestions && !isFromSuggestion) {
      setShowSuggestions(false);
    }

    setChatHistory((prev) => [...prev, { role: 'user', type: 'text', content: trimmed }]);
    setMessage('');
    setIsLoading(true);
    try {
      const res = await chatService.sendMessage({ message: trimmed });
      const replyData = res?.data?.data;

      if (replyData) {
        if (replyData.replyMessage) {
          setChatHistory((prev) => [...prev, { role: 'ai', type: 'text', content: replyData.replyMessage }]);
        }
        if (replyData.type === 'product_grid' && replyData.content?.table) {
          setChatHistory((prev) => [
            ...prev,
            {
              role: 'ai',
              type: 'text',
              content: replyData.content.descriptionTop + '<br /><i>N·∫øu b·∫°n c·∫ßn th√™m th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m n√†o, h√£y cho em bi·∫øt nh√©!</i>'
            },
            {
              role: 'ai',
              type: 'table_only',
              content: replyData.content.table
            },
            {
              role: 'ai',
              type: 'product_grid_only',
              content: {
                title: replyData.content.title,
                products: replyData.content.products,
                noteAfterGrid: replyData.content.noteAfterGrid
              }
            }
          ]);
        } else {
          setChatHistory((prev) => [...prev, { role: 'ai', type: replyData.type, content: replyData.content }]);
        }
      } else {
        setChatHistory((prev) => [...prev, { role: 'ai', type: 'text', content: 'ü§ñ Xin l·ªói, em ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi. Anh/Ch·ªã vui l√≤ng th·ª≠ l·∫°i.' }]);
      }
    } catch (error) {
      console.error("L·ªói g·ª≠i tin nh·∫Øn:", error);
      setChatHistory((prev) => [...prev, { role: 'ai', type: 'text', content: '‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.' }]);
    } finally {
      setIsLoading(false);
    }
  };

  const renderMessageContent = (msg) => {
  switch (msg.type) {
    case 'text':
      return <div dangerouslySetInnerHTML={{ __html: msg.content || '' }} />;

    case 'table_only':
      if (!msg.content || !msg.content.headers || !msg.content.rows) return null;
      return (
        <div className="overflow-x-auto max-w-full">
          <ProductTableDisplay
            tableTitle={null}
            headers={msg.content.headers}
            rows={msg.content.rows}
          />
        </div>
      );

    case 'product_grid_only':
      if (!msg.content || !msg.content.products) return null;
      return (
        <>
          <ProductGridDisplay
            title={msg.content.title || 'S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t'}
            products={msg.content.products || []}
          />
          {msg.content.noteAfterGrid && (
            <p className="text-[13px] mt-2 text-gray-600">{msg.content.noteAfterGrid}</p>
          )}
        </>
      );

    case 'product_grid':
      if (!msg.content || !msg.content.products) return null;
      return (
        <>
          {msg.content?.table && msg.content?.table.headers && msg.content?.table.rows && (
            <div className="overflow-x-auto max-w-full">
              <ProductTableDisplay
                tableTitle={msg.content.descriptionTop || ''}
                headers={msg.content.table.headers}
                rows={msg.content.table.rows}
              />
            </div>
          )}
          <ProductGridDisplay
            title={msg.content.title || 'S·∫£n ph·∫©m ƒë·ªÅ xu·∫•t'}
            products={msg.content.products || []}
          />
          {msg.content.noteAfterGrid && (
            <p className="text-[13px] mt-2 text-gray-600">{msg.content.noteAfterGrid}</p>
          )}
        </>
      );

    default:
      return <div dangerouslySetInnerHTML={{ __html: msg.content || '' }} />;
  }
};


  return (
    <>
      {!open && (
        <div className="floating-contact">
          <div className={`contact-tooltip ${!tooltipVisible ? 'hidden' : ''}`}>
            <div className="tooltip-header">
              <span className="tooltip-title">Home Power</span>
            </div>
            <div key={messageKey} className="tooltip-message-wrapper">
              <p className="tooltip-message-content">{displayTooltipMessage}</p>
            </div>
          </div>

          <button className="contact-item contact-item-dmx" onClick={handleOpenChat}>
            <img src={assistantDMXIcon} alt="Tr·ª£ l√Ω AI" className="dmx-icon-image" />
          </button>
        </div>
      )}

      {open && (
        <div className="chatbox-container">
          <div className="chatbox-header">
            <div className="header-content w-40">
              <img src={logo} alt="Home Power" />
            </div>
            <div className="header-actions">
              <button onClick={resetChat} className="header-button" title="ƒê·∫∑t l·∫°i cu·ªôc tr√≤ chuy·ªán">
                <img src={resetIcon} alt="reset" className="action-icon" />
              </button>
              <button onClick={handleCloseChat} className="header-button" title="ƒê√≥ng chat">
                <svg viewBox="0 0 24 24" className="action-icon">
                  <path d="M6 18L18 6M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                </svg>
              </button>
            </div>
          </div>

          <div className="chat-content">
            {chatHistory.map((msg, i) => (
              <div
                key={i}
                className={`chat-message ${msg.role === 'user' ? 'user-message' : 'ai-message'}`}
              >
                {renderMessageContent(msg)}
              </div>
            ))}
            {isLoading && (
              <div className="chat-message ai-message">
                <span className="loading-text">Tr·ª£ l√Ω ƒëang tr·∫£ l·ªùi...</span>
                <div className="loading-dots">
                  <span>.</span>
                  <span>.</span>
                  <span>.</span>
                </div>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>

          <div className="chat-input-area">
            {chatHistory.length > 1 && (
              <div className="suggestions-toggle">
                <button onClick={() => setShowSuggestions(!showSuggestions)}>
                  {showSuggestions ? '·∫®n g·ª£i √Ω nhanh ‚ñ≤' : 'Hi·ªán g·ª£i √Ω nhanh ‚ñº'}
                </button>
              </div>
            )}
            {showSuggestions && (
              <div className="quick-suggestions">
                {quickSuggestions.map((sug, idx) => (
                  <button key={idx} onClick={() => sendMessage(sug)} className="suggestion-button">
                    {sug}
                  </button>
                ))}
              </div>
            )}
            <div className="message-input-container">
              <input
                ref={inputRef}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && !isLoading && sendMessage()}
                disabled={isLoading}
                placeholder="Nh·∫≠p tin nh·∫Øn..."
                className="message-input"
              />
              <button onClick={() => sendMessage()} disabled={isLoading || !message.trim()} className="send-button">
                <svg className="send-icon" viewBox="0 0 24 24">
                  <path d="M2 21l21-9L2 3v7l15 2-15 2v7z" fill="currentColor" />
                </svg>
              </button>
            </div>

            <p className="disclaimer-text">Tr·ª£ l√Ω AI h·ªó tr·ª£ 24/7 - N·ªôi dung tham kh·∫£o</p>
          </div>
        </div>
      )}
    </>
  );
}
